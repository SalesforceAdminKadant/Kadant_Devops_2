public class CreateBasketFollowUpOpp {
    public Account[] cbfts = new List<Account>();
    
    public void createOpps(string strId, string strtDate)
    {
    String oppOwner = '';
    String acctOwner = '';
    String acctOwnerDivision = '';
    String acctCurrency = '';
    Boolean acctOwnerIsActive = false;
    Date endDate = date.today().addDays(-180); 
    Date startDate = date.today().addDays(-187);
    List<Opportunity> oppList = new List<Opportunity>();
    
     List<Account_Division__c> accountDetails = [select account_owner__c, Account_Owner__r.Division, Account_Owner__r.IsActive, CurrencyIsoCode from account_division__c where name = 'KL' and account__c = :strId and active__c = true];
        for(Account_Division__c acct: AccountDetails){
            acctOwner = acct.Account_Owner__c;
            acctOwnerDivision = acct.Account_Owner__r.Division;
            acctOwnerIsActive = acct.Account_Owner__r.IsActive;
            acctCurrency = acct.CurrencyIsoCode;
        }    
        if(acctOwnerDivision == 'KL' && acctOwnerIsActive == true){
            oppOwner = acctOwner;
        }
        else{
            oppOwner = '00560000006vDAMAA2'; // default to Dominique Panier
        }
        
        
    //Look up orderlines with screen baskets for this account
    List<OrderItem> basketOrderLines = [SELECT Id, quantity, order.ownerid, order.last_ship_date__c, product2.name, product2.description, product2.sub_family__c, order.name, orderid, status__c, servicedate, ship_date__c from orderitem where ship_date__c > :startDate and ship_date__c < :endDate and product2.sub_family__c = 'SBFW' and order.accountid = :strId and status__c = 'closed'];
    system.debug(basketOrderLines);

    //Look up orderlines for Noss Radiclone for this account
    List<OrderItem> radicloneOrderLines = [SELECT Id, quantity, order.ownerid, order.last_ship_date__c, product2.name, product2.description, product2.sub_family__c, order.name, orderid, status__c, servicedate, ship_date__c from orderitem where ship_date__c > :startDate and ship_date__c < :endDate and product2.sub_family__c = 'CE40' and order.accountid = :strId and status__c = 'closed'];
    system.debug(radicloneOrderLines);
        
    basketOrderLines.addAll(radicloneOrderLines);
    
    Map<String,List<String>> OrderIdMap = New Map<String, List<String>>();
    
    for(OrderItem oi: basketOrderLines){
        //if(OrderIdMap.containsKey('oi.OrderId')==false){
            OrderIdMap.put(string.valueof(oi.get('OrderId')),new List<String>{
                string.valueof(oi.getSobject('Product2').get('name')),
                string.valueof(oi.getSobject('Product2').get('description')),
                string.valueof(oi.get('Quantity')),
                string.valueof(oi.getSobject('Order').get('name')),
                oppOwner,
                string.valueof(oi.getSobject('Order').get('Last_Ship_Date__c'))    
                }
            );
       // }
    }
    system.debug(OrderIdMap);  
        
    for (Id key : OrderIdMap.keySet()) {
        Opportunity bfuopp = new Opportunity(
            Name = 'Basket Resell Opportunity',
            Stagename = 'Prospecting - 0%',
            CloseDate = date.today().addDays(30),
            Sales_Office__c = 'KL',
            Autogenerated__c = true,
            RecordTypeId = '012600000009eSTAAY',
            PriceBook2Id = '01s0z000000NiefAAC',
            CurrencyIsoCode = acctCurrency,
            AccountId = strId,
            OwnerId = OrderIdMap.get(key)[4],
            Description = 'Followup Opportunity for order ' + OrderIdMap.get(key)[3] +' (shipped ' + OrderIdMap.get(key)[5]  + ') where one or more screen baskets / Radiclones were shipped, including: ' + OrderIdMap.get(key)[2] + ' piece(s) of: ' + OrderIdMap.get(key)[0] + ' ' + OrderIdMap.get(key)[1] + '. There might be other screen baskets on this order, please check.'
        );
        oppList.add(bfuopp);
    }
        system.debug(oppList);
        
    if(!oppList.isEmpty()){
          insert oppList;
    }
      
    }
}